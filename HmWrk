#Task 1

#During the lesson, we have created a server and client, 
#which use TCP/IP protocol for communication via sockets.
#In this task, you have to create a server and client, which will use user datagram protocol (UDP) for communication.



L32T1UPDServer.py 

import socket

def main():
    #створили UDP socket
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    #зв'язали IP address та port
    server_address = ('localhost', 12348)
    server_socket.bind(server_address)

    print('Server has started and listening on {}:{}'.format(*server_address))

    while True:
        print('\nWaiting for a message...')
        data, address = server_socket.recvfrom(1024)  # отримали дані і адресу клієнта

        # конвертуємо отримані дані у строку
        message = data.decode('utf-8')

        print('Received message from {}: {}'.format(address, message))

        #повідомлення,що надсилається у відповідь клієнту
        response = 'I... am.... your Server...'

        # відповідь клієнту 
        server_socket.sendto(response.encode('utf-8'), address)
        print('Sent response to {}: {}'.format(address, response))

    #закрили сокет
    server_socket.close()

if __name__ == '__main__':
    main()

#консоль:
#Server has started and listening on localhost:12348

#Waiting for a message...


L32T1UPDClient.py

import socket

def main():

    #створили UDP socket

    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    server_address = ('localhost', 12348)

    while True:

        message = input('Please enter message to send (or "exit" to quit): ')

        if message.lower() == 'exit':

            break

        #вихідне повідомлення для сервера

        client_socket.sendto(message.encode('utf-8'), server_address)

        print('Message was sent to {}: {}'.format(*server_address, message))

        #отримаємо відповідь від сервера

        response, _ = client_socket.recvfrom(1024)

        #конвертуємо отримані дані у формат строки 

        response_message = response.decode('utf-8')

        print('Received response: {}'.format(response_message))

    #закрили сокет

    client_socket.close()

if __name__ == '__main__':

    main()

#Please enter message to send (or "exit" to quit): Hi there

#Message was sent to localhost: 12348

#Received response: I... am.... your Server...

#Please enter message to send (or "exit" to quit):  exit


#Task 2

#Extend the echo server, which returns to client the data, encrypted using the Caesar cipher algorithm by a specific key obtained from the client.


Task2UDPServer.py

import socket


def caesar_cipher(text, key):
    result = ""
    for char in text:
        if char.isalpha():
            ascii_offset = ord('A') if char.isupper() else ord('a')
            shifted = (ord(char) - ascii_offset + key) % 26 + ascii_offset)
            result += chr(shifted)
        else:
            result += char
    return result

# Create a UDP socket
server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# Bind the socket to a specific address and port
server_address = ('localhost', 65435)
server_socket.bind(server_address)

print('UDP server is running...')

while True:
    
    data, client_address = server_socket.recvfrom(1024)
    received_message = data.decode()
    print('Received message:', received_message)

    #ділимо повідомлення на ключ і текст
    key, text = received_message.split(',')
    key = int(key)

    #шифруємо повідомлення 
    encrypted_text = caesar_cipher(text, key)
    print('Encrypted text:', encrypted_text)

    #висилаємо зашифроване повідомлення клієнту
    server_socket.sendto(encrypted_text.encode(), client_address)

 Task2UPDClient.py 
 
 import socket

#створили UDP socket
client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

#адреса сервера і порта
server_address = ('localhost', 65435)

# отримаємо ключ і текст від користувача
key = int(input('Enter the key: '))
text = input('Enter the text: ')

#відсилаємо ключ і текст на сервер
message = f"{key},{text}"
client_socket.sendto(message.encode(), server_address)

#отримали і вивели в принт зашифроване повідомлення від сервера
encrypted_response, server_address = client_socket.recvfrom(1024)
print('Received encrypted response:', encrypted_response.decode())

#закрили сокет
client_socket.close()

 
